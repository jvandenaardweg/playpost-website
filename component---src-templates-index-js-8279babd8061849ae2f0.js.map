{"version":3,"sources":["webpack:///./src/templates/Post/index.js","webpack:///./src/components/Meta/index.js","webpack:///./src/templates/Page/index.js","webpack:///./src/templates/index.js"],"names":["Post","_ref","data","options","_data$frontmatter","frontmatter","category","tags","description","title","path","date","image","isIndex","html","get","isMore","match","fixed","react_default","a","createElement","className","key","gatsby_browser_entry","style","boxShadow","to","dateTime","Badges","items","primary","gatsby_image_default","display","margin","dangerouslySetInnerHTML","__html","getDescription","Button","label","body","replace","split","_ref2","_ref3","map","item","i","Meta","site","siteTitle","Helmet_default","meta","name","content","property","Page","post","Template","location","Layout","components_Meta","templates_Post","templates_Page","props","pageQuery"],"mappings":"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","file":"component---src-templates-index-js-8279babd8061849ae2f0.js","sourcesContent":["import { Link } from 'gatsby'\nimport get from 'lodash/get'\nimport React from 'react'\nimport map from 'lodash/map'\nimport Img from 'gatsby-image'\n\nimport Footer from 'components/Footer'\nimport './style.scss'\n\nconst Post = ({ data, options }) => {\n  const {\n    category,\n    tags,\n    description,\n    title,\n    path,\n    date,\n    image,\n  } = data.frontmatter\n  const { isIndex } = options\n  const html = get(data, 'html')\n  const isMore = isIndex && !!html.match('<!--more-->')\n  const fixed = get(image, 'childImageSharp.fixed')\n\n  return (\n    <div className=\"article\" key={path}>\n      <div className=\"container\">\n        <div className=\"info\">\n          <Link style={{ boxShadow: 'none' }} to={path}>\n            <h1>{title}</h1>\n            <time dateTime={date}>{date}</time>\n          </Link>\n          {Badges({ items: [category], primary: true })}\n          {Badges({ items: tags })}\n        </div>\n        <div className=\"content\">\n          <p>{description}</p>\n          {fixed ? (\n            <Img fixed={fixed} style={{ display: 'block', margin: '0 auto' }} />\n          ) : (\n            ''\n          )}\n        </div>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{\n            __html: isMore ? getDescription(html) : html,\n          }}\n        />\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\n      </div>\n    </div>\n  )\n}\n\nexport default Post\n\nconst getDescription = body => {\n  body = body.replace(/<blockquote>/g, '<blockquote className=\"blockquote\">')\n  if (body.match('<!--more-->')) {\n    body = body.split('<!--more-->')\n    if (typeof body[0] !== 'undefined') {\n      return body[0]\n    }\n  }\n  return body\n}\n\nconst Button = ({ path, label, primary }) => (\n  <Link className=\"readmore\" to={path}>\n    <span\n      className={`btn btn-outline-primary btn-block ${\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\n      }`}\n    >\n      {label}\n    </span>\n  </Link>\n)\n\nconst Badges = ({ items, primary }) =>\n  map(items, (item, i) => {\n    return (\n      <span\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\n        key={i}\n      >\n        {item}\n      </span>\n    )\n  })\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport get from 'lodash/get'\n\nconst Meta = ({ site, title }) => {\n  const siteTitle = get(site, 'title')\n  title = title ? `${title} | ${siteTitle}` : siteTitle\n  return (\n    <Helmet\n      title={title}\n      meta={[\n        { name: 'twitter:card', content: 'summary' },\n        {\n          name: 'twitter:site',\n          content: `@${get(site, 'twitter')}`,\n        },\n        { property: 'og:title', content: title },\n        { property: 'og:type', content: 'website' },\n        {\n          property: 'og:description',\n          content: get(site, 'description'),\n        },\n        {\n          property: 'og:url',\n          content: `${get(site, 'siteUrl')}/profile`,\n        },\n        {\n          property: 'og:image',\n          content: `${get(site, 'siteUrl')}/img/profile.jpg`,\n        },\n      ]}\n    />\n  )\n}\nexport default Meta\n","import React from 'react'\nimport './style.scss'\n\nconst Page = ({ data }) => (\n  <div dangerouslySetInnerHTML={{ __html: data.post.html }} />\n)\nexport default Page\n","import { graphql } from 'gatsby'\nimport get from 'lodash/get'\nimport React from 'react'\n\nimport Post from 'templates/Post'\nimport Meta from 'components/Meta'\nimport Layout from 'components/Layout'\nimport Page from 'templates/Page'\n\nconst Template = ({ data, location }) => (\n  <div>\n    <Layout location={location}>\n      <Meta\n        title={get(data, 'post.frontmatter.title')}\n        site={get(data, 'site.meta')}\n      />\n      {get(data, 'post.frontmatter.layout') != 'page' ? (\n        <Post\n          data={get(data, 'post')}\n          options={{\n            isIndex: false,\n          }}\n        />\n      ) : (\n        <Page {...this.props} />\n      )}\n    </Layout>\n  </div>\n)\nexport default Template\n\nexport const pageQuery = graphql`\n  query PostByPath($path: String!) {\n    site {\n      meta: siteMetadata {\n        title\n        description\n        url: siteUrl\n        author\n        twitter\n      }\n    }\n    post: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n      html\n      frontmatter {\n        layout\n        title\n        path\n        category\n        tags\n        description\n        date(formatString: \"YYYY/MM/DD\")\n        image {\n          childImageSharp {\n            fixed(width: 500) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}